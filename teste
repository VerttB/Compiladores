	.file	"anasint.c"
	.text
	.globl	tokenInfo
	.bss
	.align 32
	.type	tokenInfo, @object
	.size	tokenInfo, 76
tokenInfo:
	.zero	76
	.section	.rodata
.LC0:
	.string	"Operador rel esperado"
	.text
	.globl	opRel
	.type	opRel, @function
opRel:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L2
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$7, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	je	.L3
	movl	8+tk(%rip), %eax
	cmpl	$9, %eax
	jne	.L2
.L3:
	movb	$1, 4+tk(%rip)
	jmp	.L4
.L2:
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L4:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L5
	call	__stack_chk_fail@PLT
.L5:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	opRel, .-opRel
	.section	.rodata
.LC1:
	.string	"Identificador esperado!\n"
	.align 8
.LC2:
	.string	"Sinal de atribui\303\247\303\243o esperado!\n"
	.text
	.globl	Atrib
	.type	Atrib, @function
Atrib:
.LFB1:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L7
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L7:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L8
	movl	8+tk(%rip), %eax
	cmpl	$8, %eax
	je	.L9
.L8:
	leaq	.LC2(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L9:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L10
	call	__stack_chk_fail@PLT
.L10:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	Atrib, .-Atrib
	.globl	Expr
	.type	Expr, @function
Expr:
.LFB2:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, %eax
	call	exprSimples
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L14
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$7, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	je	.L13
	movl	8+tk(%rip), %eax
	cmpl	$9, %eax
	jne	.L14
.L13:
	movl	$0, %eax
	call	opRel
	movl	$0, %eax
	call	exprSimples
.L14:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	Expr, .-Expr
	.globl	exprSimples
	.type	exprSimples, @function
exprSimples:
.LFB3:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, %eax
	call	Termo
	movl	$0, %eax
	call	Resto
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	exprSimples, .-exprSimples
	.globl	Termo
	.type	Termo, @function
Termo:
.LFB4:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, %eax
	call	Fator
	movl	$0, %eax
	call	Sobra
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	Termo, .-Termo
	.globl	Resto
	.type	Resto, @function
Resto:
.LFB5:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L21
	movl	8+tk(%rip), %eax
	testl	%eax, %eax
	je	.L19
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L19
	movl	8+tk(%rip), %eax
	cmpl	$14, %eax
	jne	.L21
.L19:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Termo
	movl	$0, %eax
	call	Resto
.L21:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L20
	call	__stack_chk_fail@PLT
.L20:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	Resto, .-Resto
	.globl	Sobra
	.type	Sobra, @function
Sobra:
.LFB6:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L25
	movl	8+tk(%rip), %eax
	cmpl	$1, %eax
	je	.L24
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	je	.L24
	movl	8+tk(%rip), %eax
	cmpl	$16, %eax
	jne	.L25
.L24:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Fator
	movl	$0, %eax
	call	Sobra
.L25:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	Sobra, .-Sobra
	.section	.rodata
	.align 8
.LC3:
	.string	"Fechamento de colchetes esperado"
.LC4:
	.string	"Fecha par\303\252nteses esperado!\n"
	.align 8
.LC5:
	.string	"Identificador, constante inteira ou abre par\303\252nteses esperado!\n"
	.text
	.globl	Fator
	.type	Fator, @function
Fator:
.LFB7:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	jne	.L27
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L28
.L30:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L29
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L29
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L29:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L28:
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L30
	jmp	.L39
.L27:
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L32
	movl	tk(%rip), %eax
	cmpl	$2, %eax
	je	.L32
	movl	tk(%rip), %eax
	cmpl	$3, %eax
	jne	.L33
.L32:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L31
.L33:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L34
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	jne	.L34
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L35
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L36
.L35:
	leaq	.LC4(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
	jmp	.L31
.L36:
	movb	$1, 4+tk(%rip)
	jmp	.L31
.L34:
	leaq	.LC5(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
	jmp	.L39
.L31:
.L39:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L38
	call	__stack_chk_fail@PLT
.L38:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	Fator, .-Fator
	.section	.rodata
.LC6:
	.string	"Identificador esperado\n"
.LC7:
	.string	"Inicio da decl de array var"
	.align 8
.LC8:
	.string	"PROC ID - Matriz de tamanho inv\303\241lido"
	.align 8
.LC9:
	.string	"Esperado constante inteira ou identificador \n"
	.align 8
.LC10:
	.string	"Fechamento de colchetes esperado\n"
	.text
	.globl	declVar
	.type	declVar, @function
declVar:
.LFB8:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movl	$0, -28(%rbp)
	movl	$2, 48+tokenInfo(%rip)
	movl	$0, 52+tokenInfo(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L41
	leaq	.LC6(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L41:
	leaq	8+tk(%rip), %rax
	movq	%rax, %rsi
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	strcpy@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L42
	movl	8+tk(%rip), %eax
	cmpl	$8, %eax
	jne	.L42
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	varInit
	jmp	.L43
.L42:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L43
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	jne	.L43
	leaq	.LC7(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	jmp	.L44
.L49:
	addl	$1, -28(%rbp)
	cmpl	$2, -28(%rbp)
	jle	.L45
	leaq	.LC8(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L45:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L46
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L46
	leaq	.LC9(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L46:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L47
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L47
	leaq	.LC10(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L47:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L44:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L48
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L49
.L48:
	movl	$0, %eax
	call	arrayInit
	cmpl	$1, -28(%rbp)
	jne	.L50
	movl	$1, 52+tokenInfo(%rip)
	jmp	.L43
.L50:
	cmpl	$2, -28(%rbp)
	jne	.L51
	movl	$2, 52+tokenInfo(%rip)
	jmp	.L43
.L51:
	movl	$0, 52+tokenInfo(%rip)
.L43:
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	nop
	movq	-24(%rbp), %rax
	subq	%fs:40, %rax
	je	.L52
	call	__stack_chk_fail@PLT
.L52:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	declVar, .-declVar
	.section	.rodata
	.align 8
.LC11:
	.string	"Inicializa\303\247\303\243o de vari\303\241vel inv\303\241lida"
	.text
	.globl	varInit
	.type	varInit, @function
varInit:
.LFB9:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	cmpl	$3, %eax
	je	.L54
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L54
	movl	tk(%rip), %eax
	cmpl	$2, %eax
	jne	.L55
.L54:
	movl	64+tokenInfo(%rip), %eax
	testl	%eax, %eax
	jne	.L56
	movl	tk(%rip), %eax
	cmpl	$3, %eax
	jne	.L57
	movzbl	8+tk(%rip), %eax
	movb	%al, 68+tokenInfo(%rip)
	jmp	.L56
.L57:
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	jne	.L58
	movl	8+tk(%rip), %eax
	movl	%eax, 68+tokenInfo(%rip)
	jmp	.L56
.L58:
	movss	8+tk(%rip), %xmm0
	movss	%xmm0, 68+tokenInfo(%rip)
.L56:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L59
.L55:
	leaq	.LC11(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L59:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L60
	call	__stack_chk_fail@PLT
.L60:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	varInit, .-varInit
	.section	.rodata
	.align 8
.LC12:
	.string	"Abertura de colchetes esperado"
	.text
	.globl	arrayInit
	.type	arrayInit, @function
arrayInit:
.LFB10:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L69
	movl	8+tk(%rip), %eax
	cmpl	$8, %eax
	jne	.L69
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L63
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L63
	leaq	.LC12(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L63:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	varInit
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L64
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	jne	.L64
	jmp	.L65
.L66:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	varInit
.L65:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L64
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	je	.L66
.L64:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L67
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L67
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L67:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L69:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L68
	call	__stack_chk_fail@PLT
.L68:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	arrayInit, .-arrayInit
	.globl	declListVar
	.type	declListVar, @function
declListVar:
.LFB11:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$1, 64+tokenInfo(%rip)
	movl	$2, 44+tokenInfo(%rip)
	movl	$2, 48+tokenInfo(%rip)
	movl	$0, 56+tokenInfo(%rip)
	movl	$0, 60+tokenInfo(%rip)
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L71
	movl	8+tk(%rip), %eax
	testl	%eax, %eax
	jne	.L71
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, 64+tokenInfo(%rip)
.L71:
	movl	$0, %eax
	call	tipo
	movl	$0, %eax
	call	declVar
	jmp	.L72
.L74:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	declVar
.L72:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L76
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	je	.L74
.L76:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L75
	call	__stack_chk_fail@PLT
.L75:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	declListVar, .-declListVar
	.section	.rodata
	.align 8
.LC13:
	.string	"Esperado declara\303\247\303\243o de tipo de vari\303\241vel\n"
	.text
	.globl	tipo
	.type	tipo, @function
tipo:
.LFB12:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L78
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L79
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L79
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L79
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	jne	.L78
.L79:
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	jne	.L80
	movl	$0, 36+tokenInfo(%rip)
	jmp	.L81
.L80:
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L82
	movl	$1, 36+tokenInfo(%rip)
	jmp	.L81
.L82:
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	jne	.L83
	movl	$2, 36+tokenInfo(%rip)
	jmp	.L81
.L83:
	movl	$3, 36+tokenInfo(%rip)
.L81:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L84
.L78:
	leaq	.LC13(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L84:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L85
	call	__stack_chk_fail@PLT
.L85:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	tipo, .-tipo
	.section	.rodata
	.align 8
.LC14:
	.string	"CMD - Identificador ou palavra chave esperado"
.LC15:
	.string	"CMD - Palavra Chave Inv\303\241lida"
.LC16:
	.string	"Esperado ID do procedimento\n"
	.align 8
.LC17:
	.string	"Esperado abertura de parenteses\n"
	.align 8
.LC18:
	.string	"Identificador V\303\241lido Esperado"
	.align 8
.LC19:
	.string	"DO - Fechamento de parenteses esperado\n"
.LC20:
	.string	"While Iniciado"
	.align 8
.LC21:
	.string	"Fechamento de parenteses esperado\n"
	.align 8
.LC22:
	.string	"Fim do arquivo inesperado dentro do loop WHILE"
.LC23:
	.string	"ENDW esperado\n"
.LC24:
	.string	"While finalizado corretamente"
	.align 8
.LC25:
	.string	"ID esperado para funcionamento da fun\303\247\303\243o"
	.align 8
.LC26:
	.string	"ID ou constante inteira esperado para funcionamento da fun\303\247\303\243o"
	.align 8
.LC27:
	.string	"ID ou constante real esperado para funcionamento da fun\303\247\303\243o"
	.align 8
.LC28:
	.string	"ID ou constante char esperado para funcionamento da fun\303\247\303\243o"
	.align 8
.LC29:
	.string	"ID ou constante string esperado para funcionamento da fun\303\247\303\243o"
.LC30:
	.string	"Identificador Esperado"
.LC31:
	.string	"Palavra chave from esperado"
.LC32:
	.string	"Esperado DT ou TO"
	.align 8
.LC33:
	.string	"VAR: Identificador ou constante inteira esperada"
.LC34:
	.string	"VAR: Fim do comando esperado"
	.align 8
.LC35:
	.string	"Express\303\243o Var finalizada com sucesso na linha"
.LC36:
	.string	"If iniciado"
.LC37:
	.string	"Elif iniciado"
.LC38:
	.string	"Elif finalizado "
.LC39:
	.string	"Else iniciado"
.LC40:
	.string	"Finaliza\303\247\303\243o de Else"
.LC41:
	.string	"Esperada finaliza\303\247\303\243o de If"
.LC42:
	.string	"Finaliza\303\247\303\243o de If "
	.align 8
.LC43:
	.string	"Finaliza\303\247\303\243o de comando inesperada"
	.text
	.globl	cmd
	.type	cmd, @function
cmd:
.LFB13:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L87
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L87
	leaq	.LC14(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L87:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L88
	movl	8+tk(%rip), %eax
	cmpl	$29, %eax
	je	.L89
	movl	8+tk(%rip), %eax
	cmpl	$30, %eax
	jne	.L88
.L89:
	leaq	.LC15(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L88:
	movl	8+tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L90
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L91
	leaq	.LC16(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L91:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L92
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L93
.L92:
	leaq	.LC17(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L93:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L94
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L94
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L95
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	jne	.L95
.L94:
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L95
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	jne	.L95
	jmp	.L96
.L98:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L97
	leaq	.LC18(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L97:
	movl	$0, %eax
	call	Expr
.L96:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L95
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	je	.L98
.L95:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L99
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L100
.L99:
	leaq	.LC19(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L100:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L90:
	movl	8+tk(%rip), %eax
	cmpl	$8, %eax
	jne	.L102
	leaq	.LC20(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L103
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L104
.L103:
	leaq	.LC17(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L104:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L105
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L106
.L105:
	leaq	.LC21(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L106:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L107
.L109:
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L108
	leaq	.LC22(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L108:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L107:
	movl	8+tk(%rip), %eax
	cmpl	$9, %eax
	jne	.L109
	movl	8+tk(%rip), %eax
	cmpl	$9, %eax
	je	.L110
	leaq	.LC23(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L110:
	leaq	.LC24(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L102:
	movl	tk(%rip), %eax
	testl	%eax, %eax
	jne	.L111
	movl	$0, %eax
	call	Atrib
	jmp	.L166
.L111:
	movl	8+tk(%rip), %eax
	cmpl	$26, %eax
	jne	.L112
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L112:
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	jne	.L113
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L114
	leaq	.LC25(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L114:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L113:
	movl	8+tk(%rip), %eax
	cmpl	$21, %eax
	jne	.L115
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L116
	leaq	.LC25(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L116:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L115:
	movl	8+tk(%rip), %eax
	cmpl	$20, %eax
	jne	.L117
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L118
	leaq	.LC25(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L118:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L117:
	movl	8+tk(%rip), %eax
	cmpl	$28, %eax
	jne	.L119
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L120
	leaq	.LC25(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L120:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L119:
	movl	8+tk(%rip), %eax
	cmpl	$22, %eax
	jne	.L121
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L122
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L122
	leaq	.LC26(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L122:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L121:
	movl	8+tk(%rip), %eax
	cmpl	$24, %eax
	jne	.L123
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L124
	movl	tk(%rip), %eax
	cmpl	$2, %eax
	je	.L124
	leaq	.LC27(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L124:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L123:
	movl	8+tk(%rip), %eax
	cmpl	$23, %eax
	jne	.L125
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L126
	movl	tk(%rip), %eax
	cmpl	$3, %eax
	je	.L126
	leaq	.LC28(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L126:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L125:
	movl	8+tk(%rip), %eax
	cmpl	$27, %eax
	jne	.L127
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L128
	movl	tk(%rip), %eax
	cmpl	$4, %eax
	je	.L128
	leaq	.LC29(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L128:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L127:
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	jne	.L129
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L130
	leaq	.LC30(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L130:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L131
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L131
	leaq	.LC31(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L131:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L132
	movl	8+tk(%rip), %eax
	cmpl	$25, %eax
	jne	.L133
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L132
.L133:
	leaq	.LC32(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L132:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L134
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	jne	.L134
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L135
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L135
	leaq	.LC33(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L135:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L134:
	movb	$1, 4+tk(%rip)
	jmp	.L136
.L138:
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L137
	leaq	.LC22(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L137:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L136:
	movl	8+tk(%rip), %eax
	cmpl	$14, %eax
	jne	.L138
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L139
	movl	8+tk(%rip), %eax
	cmpl	$14, %eax
	je	.L139
	leaq	.LC34(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L139:
	leaq	.LC35(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	movb	$1, 4+tk(%rip)
	jmp	.L166
.L129:
	movl	8+tk(%rip), %eax
	cmpl	$15, %eax
	jne	.L140
	leaq	.LC36(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L141
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L142
.L141:
	leaq	.LC17(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L142:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L143
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L144
.L143:
	leaq	.LC21(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L144:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L145
.L148:
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L146
	leaq	.LC22(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L146:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L145:
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	je	.L149
	movl	8+tk(%rip), %eax
	cmpl	$16, %eax
	je	.L149
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	jne	.L148
	jmp	.L149
.L158:
	leaq	.LC37(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L150
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L151
.L150:
	leaq	.LC17(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L151:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	Expr
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L152
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L153
.L152:
	leaq	.LC21(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L153:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L154
.L157:
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L155
	leaq	.LC22(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L155:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L154:
	movl	8+tk(%rip), %eax
	cmpl	$16, %eax
	je	.L156
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	je	.L156
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	jne	.L157
.L156:
	leaq	.LC38(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
.L149:
	movl	8+tk(%rip), %eax
	cmpl	$16, %eax
	je	.L158
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	jne	.L159
	leaq	.LC39(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L160
.L162:
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L161
	leaq	.LC22(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L161:
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L160:
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	jne	.L162
.L159:
	leaq	.LC40(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	je	.L163
	leaq	.LC41(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L163:
	leaq	.LC42(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L166
.L140:
	movl	8+tk(%rip), %eax
	cmpl	$18, %eax
	je	.L164
	movl	8+tk(%rip), %eax
	cmpl	$9, %eax
	je	.L164
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L164
	movl	8+tk(%rip), %eax
	cmpl	$14, %eax
	je	.L164
	movl	8+tk(%rip), %eax
	cmpl	$17, %eax
	je	.L164
	movl	8+tk(%rip), %eax
	cmpl	$16, %eax
	jne	.L166
.L164:
	leaq	.LC43(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L166:
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L165
	call	__stack_chk_fail@PLT
.L165:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	cmd, .-cmd
	.section	.rodata
	.align 8
.LC44:
	.string	"Inicializador de Fun\303\247\303\243o esperado"
.LC45:
	.string	"Prot incializado e "
.LC46:
	.string	"Identificador esperado"
	.align 8
.LC47:
	.string	"Abertura de parenteses esperado"
	.align 8
.LC48:
	.string	"Fechamento de parenteses esperado"
.LC49:
	.string	"Prot finalizado "
.LC50:
	.string	"Init inicializado"
	.align 8
.LC51:
	.string	"Finaliza\303\247\303\243o de procedimento init esperado"
.LC52:
	.string	"Init finalizado "
.LC53:
	.string	"Def Id inicializado"
	.align 8
.LC54:
	.string	"Declara\303\247\303\243o n\303\243o encontrada VALOR DE POS %d"
	.align 8
.LC55:
	.string	"PROC ID = Identificador Esperado"
	.align 8
.LC56:
	.string	"PROC ID - COnstante inteira ou identificador esperado"
.LC57:
	.string	"Dimens\303\243o %d"
	.align 8
.LC58:
	.string	"Finaliza\303\247\303\243o de procedimento id esperado"
.LC59:
	.string	"Finaliza\303\247\303\243o de DEF ID"
	.align 8
.LC60:
	.string	"Inicializador ou identificador esperado"
	.text
	.globl	declDefProc
	.type	declDefProc, @function
declDefProc:
.LFB14:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L168
	leaq	.LC44(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L168:
	movb	$1, 4+tk(%rip)
	movl	8+tk(%rip), %eax
	cmpl	$29, %eax
	jne	.L169
	leaq	.LC45(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L170
	leaq	.LC46(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L170:
	leaq	8+tk(%rip), %rax
	movq	%rax, %rsi
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	strcpy@PLT
	movl	$3, 52+tokenInfo(%rip)
	movl	$0, 32+tokenInfo(%rip)
	movl	$1, 64+tokenInfo(%rip)
	movl	$2, 48+tokenInfo(%rip)
	movl	$2, 44+tokenInfo(%rip)
	movl	$4, 36+tokenInfo(%rip)
	movl	$2, 40+tokenInfo(%rip)
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	resetTokenInfo@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L171
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L172
.L171:
	leaq	.LC47(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L172:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L173
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	jne	.L174
.L173:
	movl	$0, %eax
	call	param
	jmp	.L175
.L177:
	movl	$1, 52+tokenInfo(%rip)
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	printTokenDados@PLT
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L176
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L176:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L175:
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L177
	movl	$1, 32+tokenInfo(%rip)
	movl	$1, 64+tokenInfo(%rip)
	movl	$2, 48+tokenInfo(%rip)
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	jmp	.L178
.L182:
	movl	$1, 32+tokenInfo(%rip)
	movl	$1, 64+tokenInfo(%rip)
	movl	$0, 52+tokenInfo(%rip)
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	param
	jmp	.L179
.L181:
	movl	$1, 52+tokenInfo(%rip)
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L180
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L180:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L179:
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L181
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
.L178:
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	je	.L182
.L174:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L183
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L184
.L183:
	leaq	.LC48(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L184:
	leaq	.LC49(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	jmp	.L234
.L169:
	movl	8+tk(%rip), %eax
	cmpl	$30, %eax
	jne	.L234
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$3, 52+tokenInfo(%rip)
	movl	$2, 40+tokenInfo(%rip)
	movl	$1, 64+tokenInfo(%rip)
	movl	$2, 44+tokenInfo(%rip)
	movl	$0, 32+tokenInfo(%rip)
	movl	$4, 36+tokenInfo(%rip)
	movl	$2, 48+tokenInfo(%rip)
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L186
	movl	8+tk(%rip), %eax
	cmpl	$1, %eax
	jne	.L186
	leaq	.LC50(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$1953066569, tokenInfo(%rip)
	movb	$0, 4+tokenInfo(%rip)
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L187
.L189:
	movl	$1, 32+tokenInfo(%rip)
	movl	$1, 40+tokenInfo(%rip)
	movl	$0, %eax
	call	declListVar
.L187:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L190
	movl	8+tk(%rip), %eax
	testl	%eax, %eax
	je	.L189
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L189
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	je	.L189
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L189
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L189
	jmp	.L190
.L193:
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L235
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movb	$1, 4+tk(%rip)
.L190:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L193
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L193
	jmp	.L192
.L235:
	nop
.L192:
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L194
	leaq	.LC51(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L194:
	movb	$1, 4+tk(%rip)
	leaq	.LC52(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	jmp	.L234
.L186:
	movl	tk(%rip), %eax
	testl	%eax, %eax
	jne	.L195
	leaq	.LC53(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	leaq	8+tk(%rip), %rax
	movq	%rax, %rdi
	call	buscaLexPos@PLT
	movl	%eax, -32(%rbp)
	cmpl	$-1, -32(%rbp)
	jne	.L196
	movl	-32(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC54(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	leaq	8+tk(%rip), %rax
	movq	%rax, %rsi
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	strcpy@PLT
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
.L196:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L197
	movl	8+tk(%rip), %eax
	cmpl	$10, %eax
	je	.L197
	leaq	.LC47(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L197:
	movl	$1, 8+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	je	.L198
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	jne	.L199
.L198:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	param
	movb	$1, 4+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L200
	leaq	.LC55(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L200:
	leaq	8+tk(%rip), %rax
	movq	%rax, %rsi
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	strcpy@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, -28(%rbp)
	jmp	.L201
.L205:
	addl	$1, -28(%rbp)
	cmpl	$2, -28(%rbp)
	jle	.L202
	leaq	.LC8(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L202:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L203
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L203
	leaq	.LC56(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L203:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L204
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L204:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L201:
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L205
	movl	-28(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC57(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	cmpl	$1, -28(%rbp)
	jne	.L206
	movl	$1, 52+tokenInfo(%rip)
	jmp	.L207
.L206:
	cmpl	$2, -28(%rbp)
	jne	.L208
	movl	$2, 52+tokenInfo(%rip)
	jmp	.L207
.L208:
	movl	$0, 52+tokenInfo(%rip)
.L207:
	cmpl	$-1, -32(%rbp)
	jne	.L209
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	jmp	.L211
.L209:
	addl	$1, -32(%rbp)
	movl	-32(%rbp), %edx
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rcx
	movq	%rcx, 64(%rax)
	movl	72+tokenInfo(%rip), %ecx
	movl	%ecx, 72(%rax)
	movl	%edx, %edi
	call	inserirVazios@PLT
	addq	$80, %rsp
	jmp	.L211
.L222:
	movl	$0, -28(%rbp)
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$0, %eax
	call	param
	movb	$1, 4+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L212
	leaq	.LC30(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L212:
	leaq	8+tk(%rip), %rax
	movq	%rax, %rsi
	leaq	tokenInfo(%rip), %rax
	movq	%rax, %rdi
	call	strcpy@PLT
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L213
.L217:
	addl	$1, -28(%rbp)
	cmpl	$2, -28(%rbp)
	jle	.L214
	leaq	.LC8(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L214:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L215
	movl	tk(%rip), %eax
	cmpl	$1, %eax
	je	.L215
	leaq	.LC56(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L215:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	8+tk(%rip), %eax
	cmpl	$13, %eax
	je	.L216
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L216:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
.L213:
	movl	8+tk(%rip), %eax
	cmpl	$12, %eax
	je	.L217
	cmpl	$1, -28(%rbp)
	jne	.L218
	movl	$1, 52+tokenInfo(%rip)
	jmp	.L219
.L218:
	cmpl	$2, -28(%rbp)
	jne	.L220
	movl	$2, 52+tokenInfo(%rip)
	jmp	.L219
.L220:
	movl	$0, 52+tokenInfo(%rip)
.L219:
	cmpl	$-1, -32(%rbp)
	jne	.L221
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rdx
	movq	%rdx, 64(%rax)
	movl	72+tokenInfo(%rip), %edx
	movl	%edx, 72(%rax)
	call	inserirNaTabela@PLT
	addq	$80, %rsp
	jmp	.L211
.L221:
	addl	$1, -32(%rbp)
	movl	-32(%rbp), %edx
	subq	$80, %rsp
	movq	%rsp, %rax
	movq	tokenInfo(%rip), %rcx
	movq	8+tokenInfo(%rip), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16+tokenInfo(%rip), %rcx
	movq	24+tokenInfo(%rip), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32+tokenInfo(%rip), %rcx
	movq	40+tokenInfo(%rip), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48+tokenInfo(%rip), %rcx
	movq	56+tokenInfo(%rip), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64+tokenInfo(%rip), %rcx
	movq	%rcx, 64(%rax)
	movl	72+tokenInfo(%rip), %ecx
	movl	%ecx, 72(%rax)
	movl	%edx, %edi
	call	inserirVazios@PLT
	addq	$80, %rsp
.L211:
	movl	8+tk(%rip), %eax
	cmpl	$19, %eax
	je	.L222
.L199:
	movl	tk(%rip), %eax
	cmpl	$6, %eax
	jne	.L223
	movl	8+tk(%rip), %eax
	cmpl	$11, %eax
	je	.L224
.L223:
	leaq	.LC48(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L224:
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	jmp	.L225
.L227:
	movl	$1, 32+tokenInfo(%rip)
	movl	$1, 40+tokenInfo(%rip)
	movl	$0, %eax
	call	declListVar
.L225:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L228
	movl	8+tk(%rip), %eax
	testl	%eax, %eax
	je	.L227
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L227
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	je	.L227
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L227
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L227
	jmp	.L228
.L231:
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L236
	movb	$1, 4+tk(%rip)
	movl	$0, %eax
	call	cmd
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movb	$1, 4+tk(%rip)
.L228:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	je	.L231
	movl	tk(%rip), %eax
	testl	%eax, %eax
	je	.L231
	jmp	.L230
.L236:
	nop
.L230:
	movl	8+tk(%rip), %eax
	cmpl	$2, %eax
	je	.L232
	leaq	.LC58(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L232:
	movb	$1, 4+tk(%rip)
	leaq	.LC59(%rip), %rax
	movq	%rax, %rdi
	call	printFinalizacao@PLT
	jmp	.L234
.L195:
	leaq	.LC60(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L234:
	nop
	movq	-24(%rbp), %rax
	subq	%fs:40, %rax
	je	.L233
	call	__stack_chk_fail@PLT
.L233:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	declDefProc, .-declDefProc
	.globl	param
	.type	param, @function
param:
.LFB15:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$3, 40+tokenInfo(%rip)
	movl	8+tk(%rip), %eax
	cmpl	$15, %eax
	jne	.L238
	movb	$1, 4+tk(%rip)
	movq	f(%rip), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-32(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	$1, 44+tokenInfo(%rip)
	jmp	.L239
.L238:
	movl	$0, 44+tokenInfo(%rip)
.L239:
	movl	$0, %eax
	call	tipo
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L240
	call	__stack_chk_fail@PLT
.L240:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	param, .-param
	.globl	prog
	.type	prog, @function
prog:
.LFB16:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	jmp	.L242
.L244:
	movl	$0, 32+tokenInfo(%rip)
	movl	$0, 40+tokenInfo(%rip)
	movl	$0, %eax
	call	declListVar
.L242:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L245
	movl	8+tk(%rip), %eax
	testl	%eax, %eax
	je	.L244
	movl	8+tk(%rip), %eax
	cmpl	$4, %eax
	je	.L244
	movl	8+tk(%rip), %eax
	cmpl	$3, %eax
	je	.L244
	movl	8+tk(%rip), %eax
	cmpl	$6, %eax
	je	.L244
	movl	8+tk(%rip), %eax
	cmpl	$5, %eax
	je	.L244
	jmp	.L245
.L247:
	movl	$1, 32+tokenInfo(%rip)
	movl	$1, 40+tokenInfo(%rip)
	movl	$0, %eax
	call	declDefProc
.L245:
	movl	tk(%rip), %eax
	cmpl	$7, %eax
	jne	.L248
	movl	8+tk(%rip), %eax
	cmpl	$29, %eax
	je	.L247
	movl	8+tk(%rip), %eax
	cmpl	$30, %eax
	je	.L247
.L248:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	prog, .-prog
	.section	.rodata
.LC61:
	.string	"r"
	.align 8
.LC62:
	.string	"Arquivo de entrada da express\303\243o nao encontrado!\n"
	.align 8
.LC63:
	.string	"\n------------------------------------"
.LC64:
	.string	"Fim do arquivo %s"
	.text
	.globl	testeSint
	.type	testeSint, @function
testeSint:
.LFB17:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -24(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-24(%rbp), %rax
	leaq	.LC61(%rip), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fopen@PLT
	movq	%rax, f(%rip)
	movq	f(%rip), %rax
	testq	%rax, %rax
	jne	.L250
	leaq	.LC62(%rip), %rax
	movq	%rax, %rdi
	call	error@PLT
.L250:
	movb	$1, 4+tk(%rip)
.L253:
	movq	f(%rip), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	analex@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, tk(%rip)
	movq	%rdx, 8+tk(%rip)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16+tk(%rip)
	movq	%rdx, 24+tk(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, 32+tk(%rip)
	movl	tk(%rip), %eax
	cmpl	$5, %eax
	jne	.L251
	leaq	.LC63(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movq	-24(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC64(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	leaq	.LC63(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	nop
	movq	f(%rip), %rax
	movq	%rax, %rdi
	call	fclose@PLT
	nop
	movq	-8(%rbp), %rax
	subq	%fs:40, %rax
	je	.L254
	jmp	.L255
.L251:
	movl	$0, %eax
	call	prog
	movb	$1, 4+tk(%rip)
	jmp	.L253
.L255:
	call	__stack_chk_fail@PLT
.L254:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	testeSint, .-testeSint
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
